# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sakuraTalk_pb2 as sakuraTalk__pb2


class TalkServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.updateProfileAttributes = channel.unary_unary(
                '/TalkService.TalkService/updateProfileAttributes',
                request_serializer=sakuraTalk__pb2.updateProfileAttributesRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.updateProfileAttributesResponse.FromString,
                )
        self.getProfile = channel.unary_unary(
                '/TalkService.TalkService/getProfile',
                request_serializer=sakuraTalk__pb2.Empty.SerializeToString,
                response_deserializer=sakuraTalk__pb2.Profile.FromString,
                )
        self.sendMessage = channel.unary_unary(
                '/TalkService.TalkService/sendMessage',
                request_serializer=sakuraTalk__pb2.sendMessageRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.sendMessageResponse.FromString,
                )
        self.editMessage = channel.unary_unary(
                '/TalkService.TalkService/editMessage',
                request_serializer=sakuraTalk__pb2.editMessageRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.editMessageResponse.FromString,
                )
        self.resendMessage = channel.unary_unary(
                '/TalkService.TalkService/resendMessage',
                request_serializer=sakuraTalk__pb2.resendMessageRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.resendMessageResponse.FromString,
                )
        self.unsendMessage = channel.unary_unary(
                '/TalkService.TalkService/unsendMessage',
                request_serializer=sakuraTalk__pb2.unsendMessageRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.unsendMessageResponse.FromString,
                )
        self.readMessage = channel.unary_unary(
                '/TalkService.TalkService/readMessage',
                request_serializer=sakuraTalk__pb2.readMessageRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.readMessageResponse.FromString,
                )
        self.unreadMessage = channel.unary_unary(
                '/TalkService.TalkService/unreadMessage',
                request_serializer=sakuraTalk__pb2.unreadMessageRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.unreadMessageResponse.FromString,
                )
        self.reportMessage = channel.unary_unary(
                '/TalkService.TalkService/reportMessage',
                request_serializer=sakuraTalk__pb2.reportMessageRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.reportMessageResponse.FromString,
                )
        self.removeAllMessages = channel.unary_unary(
                '/TalkService.TalkService/removeAllMessages',
                request_serializer=sakuraTalk__pb2.removeAllMessagesRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.removeAllMessagesResponse.FromString,
                )
        self.actionMessage = channel.unary_unary(
                '/TalkService.TalkService/actionMessage',
                request_serializer=sakuraTalk__pb2.actionMessageRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.actionMessageResponse.FromString,
                )
        self.announceMessage = channel.unary_unary(
                '/TalkService.TalkService/announceMessage',
                request_serializer=sakuraTalk__pb2.announceMessageRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.announceMessageResponse.FromString,
                )
        self.getSetting = channel.unary_unary(
                '/TalkService.TalkService/getSetting',
                request_serializer=sakuraTalk__pb2.Empty.SerializeToString,
                response_deserializer=sakuraTalk__pb2.Setting.FromString,
                )
        self.updateSettingAttributes = channel.unary_unary(
                '/TalkService.TalkService/updateSettingAttributes',
                request_serializer=sakuraTalk__pb2.updateSettingAttributesRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.updateSettingAttributesResponse.FromString,
                )
        self.getContacts = channel.unary_unary(
                '/TalkService.TalkService/getContacts',
                request_serializer=sakuraTalk__pb2.getContactsRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.getContactsResponse.FromString,
                )
        self.updateContact = channel.unary_unary(
                '/TalkService.TalkService/updateContact',
                request_serializer=sakuraTalk__pb2.updateContactRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.updateContactResponse.FromString,
                )
        self.getTag = channel.unary_unary(
                '/TalkService.TalkService/getTag',
                request_serializer=sakuraTalk__pb2.getTagRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.getTagResponse.FromString,
                )
        self.createTag = channel.unary_unary(
                '/TalkService.TalkService/createTag',
                request_serializer=sakuraTalk__pb2.createTagRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.createTagResponse.FromString,
                )
        self.updateTag = channel.unary_unary(
                '/TalkService.TalkService/updateTag',
                request_serializer=sakuraTalk__pb2.updateTagRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.updateTagResponse.FromString,
                )
        self.registerTags = channel.unary_unary(
                '/TalkService.TalkService/registerTags',
                request_serializer=sakuraTalk__pb2.registerTagsRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.registerTagsResponse.FromString,
                )
        self.getAllTags = channel.unary_unary(
                '/TalkService.TalkService/getAllTags',
                request_serializer=sakuraTalk__pb2.Empty.SerializeToString,
                response_deserializer=sakuraTalk__pb2.getAllTagsResponse.FromString,
                )
        self.deleteTag = channel.unary_unary(
                '/TalkService.TalkService/deleteTag',
                request_serializer=sakuraTalk__pb2.deleteTagRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.deleteTagResponse.FromString,
                )
        self.addFriend = channel.unary_unary(
                '/TalkService.TalkService/addFriend',
                request_serializer=sakuraTalk__pb2.addFriendRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.addFriendResponse.FromString,
                )
        self.deleteFriends = channel.unary_unary(
                '/TalkService.TalkService/deleteFriends',
                request_serializer=sakuraTalk__pb2.deleteFriendsRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.deleteFriendsResponse.FromString,
                )
        self.blockFriends = channel.unary_unary(
                '/TalkService.TalkService/blockFriends',
                request_serializer=sakuraTalk__pb2.blockFriendsRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.blockFriendsResponse.FromString,
                )
        self.unblockFriends = channel.unary_unary(
                '/TalkService.TalkService/unblockFriends',
                request_serializer=sakuraTalk__pb2.unblockFriendsRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.unblockFriendsResponse.FromString,
                )
        self.addFriendsToFavorite = channel.unary_unary(
                '/TalkService.TalkService/addFriendsToFavorite',
                request_serializer=sakuraTalk__pb2.addFriendsToFavoriteRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.addFriendsToFavoriteResponse.FromString,
                )
        self.removeFriendsFromFavorite = channel.unary_unary(
                '/TalkService.TalkService/removeFriendsFromFavorite',
                request_serializer=sakuraTalk__pb2.removeFriendsFromFavoriteRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.removeFriendsFromFavoriteResponse.FromString,
                )
        self.registerPrimary = channel.unary_unary(
                '/TalkService.TalkService/registerPrimary',
                request_serializer=sakuraTalk__pb2.registerPrimaryRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.registerPrimaryResponse.FromString,
                )
        self.getGroup = channel.unary_unary(
                '/TalkService.TalkService/getGroup',
                request_serializer=sakuraTalk__pb2.getGroupRequest.SerializeToString,
                response_deserializer=sakuraTalk__pb2.getGroupResponse.FromString,
                )


class TalkServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def updateProfileAttributes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def editMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unsendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unreadMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reportMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeAllMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def actionMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def announceMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSetting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateSettingAttributes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getContacts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateContact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addFriend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteFriends(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def blockFriends(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unblockFriends(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addFriendsToFavorite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeFriendsFromFavorite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerPrimary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TalkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'updateProfileAttributes': grpc.unary_unary_rpc_method_handler(
                    servicer.updateProfileAttributes,
                    request_deserializer=sakuraTalk__pb2.updateProfileAttributesRequest.FromString,
                    response_serializer=sakuraTalk__pb2.updateProfileAttributesResponse.SerializeToString,
            ),
            'getProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.getProfile,
                    request_deserializer=sakuraTalk__pb2.Empty.FromString,
                    response_serializer=sakuraTalk__pb2.Profile.SerializeToString,
            ),
            'sendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.sendMessage,
                    request_deserializer=sakuraTalk__pb2.sendMessageRequest.FromString,
                    response_serializer=sakuraTalk__pb2.sendMessageResponse.SerializeToString,
            ),
            'editMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.editMessage,
                    request_deserializer=sakuraTalk__pb2.editMessageRequest.FromString,
                    response_serializer=sakuraTalk__pb2.editMessageResponse.SerializeToString,
            ),
            'resendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.resendMessage,
                    request_deserializer=sakuraTalk__pb2.resendMessageRequest.FromString,
                    response_serializer=sakuraTalk__pb2.resendMessageResponse.SerializeToString,
            ),
            'unsendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.unsendMessage,
                    request_deserializer=sakuraTalk__pb2.unsendMessageRequest.FromString,
                    response_serializer=sakuraTalk__pb2.unsendMessageResponse.SerializeToString,
            ),
            'readMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.readMessage,
                    request_deserializer=sakuraTalk__pb2.readMessageRequest.FromString,
                    response_serializer=sakuraTalk__pb2.readMessageResponse.SerializeToString,
            ),
            'unreadMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.unreadMessage,
                    request_deserializer=sakuraTalk__pb2.unreadMessageRequest.FromString,
                    response_serializer=sakuraTalk__pb2.unreadMessageResponse.SerializeToString,
            ),
            'reportMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.reportMessage,
                    request_deserializer=sakuraTalk__pb2.reportMessageRequest.FromString,
                    response_serializer=sakuraTalk__pb2.reportMessageResponse.SerializeToString,
            ),
            'removeAllMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.removeAllMessages,
                    request_deserializer=sakuraTalk__pb2.removeAllMessagesRequest.FromString,
                    response_serializer=sakuraTalk__pb2.removeAllMessagesResponse.SerializeToString,
            ),
            'actionMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.actionMessage,
                    request_deserializer=sakuraTalk__pb2.actionMessageRequest.FromString,
                    response_serializer=sakuraTalk__pb2.actionMessageResponse.SerializeToString,
            ),
            'announceMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.announceMessage,
                    request_deserializer=sakuraTalk__pb2.announceMessageRequest.FromString,
                    response_serializer=sakuraTalk__pb2.announceMessageResponse.SerializeToString,
            ),
            'getSetting': grpc.unary_unary_rpc_method_handler(
                    servicer.getSetting,
                    request_deserializer=sakuraTalk__pb2.Empty.FromString,
                    response_serializer=sakuraTalk__pb2.Setting.SerializeToString,
            ),
            'updateSettingAttributes': grpc.unary_unary_rpc_method_handler(
                    servicer.updateSettingAttributes,
                    request_deserializer=sakuraTalk__pb2.updateSettingAttributesRequest.FromString,
                    response_serializer=sakuraTalk__pb2.updateSettingAttributesResponse.SerializeToString,
            ),
            'getContacts': grpc.unary_unary_rpc_method_handler(
                    servicer.getContacts,
                    request_deserializer=sakuraTalk__pb2.getContactsRequest.FromString,
                    response_serializer=sakuraTalk__pb2.getContactsResponse.SerializeToString,
            ),
            'updateContact': grpc.unary_unary_rpc_method_handler(
                    servicer.updateContact,
                    request_deserializer=sakuraTalk__pb2.updateContactRequest.FromString,
                    response_serializer=sakuraTalk__pb2.updateContactResponse.SerializeToString,
            ),
            'getTag': grpc.unary_unary_rpc_method_handler(
                    servicer.getTag,
                    request_deserializer=sakuraTalk__pb2.getTagRequest.FromString,
                    response_serializer=sakuraTalk__pb2.getTagResponse.SerializeToString,
            ),
            'createTag': grpc.unary_unary_rpc_method_handler(
                    servicer.createTag,
                    request_deserializer=sakuraTalk__pb2.createTagRequest.FromString,
                    response_serializer=sakuraTalk__pb2.createTagResponse.SerializeToString,
            ),
            'updateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTag,
                    request_deserializer=sakuraTalk__pb2.updateTagRequest.FromString,
                    response_serializer=sakuraTalk__pb2.updateTagResponse.SerializeToString,
            ),
            'registerTags': grpc.unary_unary_rpc_method_handler(
                    servicer.registerTags,
                    request_deserializer=sakuraTalk__pb2.registerTagsRequest.FromString,
                    response_serializer=sakuraTalk__pb2.registerTagsResponse.SerializeToString,
            ),
            'getAllTags': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllTags,
                    request_deserializer=sakuraTalk__pb2.Empty.FromString,
                    response_serializer=sakuraTalk__pb2.getAllTagsResponse.SerializeToString,
            ),
            'deleteTag': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTag,
                    request_deserializer=sakuraTalk__pb2.deleteTagRequest.FromString,
                    response_serializer=sakuraTalk__pb2.deleteTagResponse.SerializeToString,
            ),
            'addFriend': grpc.unary_unary_rpc_method_handler(
                    servicer.addFriend,
                    request_deserializer=sakuraTalk__pb2.addFriendRequest.FromString,
                    response_serializer=sakuraTalk__pb2.addFriendResponse.SerializeToString,
            ),
            'deleteFriends': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteFriends,
                    request_deserializer=sakuraTalk__pb2.deleteFriendsRequest.FromString,
                    response_serializer=sakuraTalk__pb2.deleteFriendsResponse.SerializeToString,
            ),
            'blockFriends': grpc.unary_unary_rpc_method_handler(
                    servicer.blockFriends,
                    request_deserializer=sakuraTalk__pb2.blockFriendsRequest.FromString,
                    response_serializer=sakuraTalk__pb2.blockFriendsResponse.SerializeToString,
            ),
            'unblockFriends': grpc.unary_unary_rpc_method_handler(
                    servicer.unblockFriends,
                    request_deserializer=sakuraTalk__pb2.unblockFriendsRequest.FromString,
                    response_serializer=sakuraTalk__pb2.unblockFriendsResponse.SerializeToString,
            ),
            'addFriendsToFavorite': grpc.unary_unary_rpc_method_handler(
                    servicer.addFriendsToFavorite,
                    request_deserializer=sakuraTalk__pb2.addFriendsToFavoriteRequest.FromString,
                    response_serializer=sakuraTalk__pb2.addFriendsToFavoriteResponse.SerializeToString,
            ),
            'removeFriendsFromFavorite': grpc.unary_unary_rpc_method_handler(
                    servicer.removeFriendsFromFavorite,
                    request_deserializer=sakuraTalk__pb2.removeFriendsFromFavoriteRequest.FromString,
                    response_serializer=sakuraTalk__pb2.removeFriendsFromFavoriteResponse.SerializeToString,
            ),
            'registerPrimary': grpc.unary_unary_rpc_method_handler(
                    servicer.registerPrimary,
                    request_deserializer=sakuraTalk__pb2.registerPrimaryRequest.FromString,
                    response_serializer=sakuraTalk__pb2.registerPrimaryResponse.SerializeToString,
            ),
            'getGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.getGroup,
                    request_deserializer=sakuraTalk__pb2.getGroupRequest.FromString,
                    response_serializer=sakuraTalk__pb2.getGroupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TalkService.TalkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TalkService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def updateProfileAttributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/updateProfileAttributes',
            sakuraTalk__pb2.updateProfileAttributesRequest.SerializeToString,
            sakuraTalk__pb2.updateProfileAttributesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/getProfile',
            sakuraTalk__pb2.Empty.SerializeToString,
            sakuraTalk__pb2.Profile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/sendMessage',
            sakuraTalk__pb2.sendMessageRequest.SerializeToString,
            sakuraTalk__pb2.sendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def editMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/editMessage',
            sakuraTalk__pb2.editMessageRequest.SerializeToString,
            sakuraTalk__pb2.editMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/resendMessage',
            sakuraTalk__pb2.resendMessageRequest.SerializeToString,
            sakuraTalk__pb2.resendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unsendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/unsendMessage',
            sakuraTalk__pb2.unsendMessageRequest.SerializeToString,
            sakuraTalk__pb2.unsendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/readMessage',
            sakuraTalk__pb2.readMessageRequest.SerializeToString,
            sakuraTalk__pb2.readMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unreadMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/unreadMessage',
            sakuraTalk__pb2.unreadMessageRequest.SerializeToString,
            sakuraTalk__pb2.unreadMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reportMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/reportMessage',
            sakuraTalk__pb2.reportMessageRequest.SerializeToString,
            sakuraTalk__pb2.reportMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeAllMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/removeAllMessages',
            sakuraTalk__pb2.removeAllMessagesRequest.SerializeToString,
            sakuraTalk__pb2.removeAllMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def actionMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/actionMessage',
            sakuraTalk__pb2.actionMessageRequest.SerializeToString,
            sakuraTalk__pb2.actionMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def announceMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/announceMessage',
            sakuraTalk__pb2.announceMessageRequest.SerializeToString,
            sakuraTalk__pb2.announceMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSetting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/getSetting',
            sakuraTalk__pb2.Empty.SerializeToString,
            sakuraTalk__pb2.Setting.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateSettingAttributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/updateSettingAttributes',
            sakuraTalk__pb2.updateSettingAttributesRequest.SerializeToString,
            sakuraTalk__pb2.updateSettingAttributesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getContacts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/getContacts',
            sakuraTalk__pb2.getContactsRequest.SerializeToString,
            sakuraTalk__pb2.getContactsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateContact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/updateContact',
            sakuraTalk__pb2.updateContactRequest.SerializeToString,
            sakuraTalk__pb2.updateContactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/getTag',
            sakuraTalk__pb2.getTagRequest.SerializeToString,
            sakuraTalk__pb2.getTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/createTag',
            sakuraTalk__pb2.createTagRequest.SerializeToString,
            sakuraTalk__pb2.createTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/updateTag',
            sakuraTalk__pb2.updateTagRequest.SerializeToString,
            sakuraTalk__pb2.updateTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/registerTags',
            sakuraTalk__pb2.registerTagsRequest.SerializeToString,
            sakuraTalk__pb2.registerTagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/getAllTags',
            sakuraTalk__pb2.Empty.SerializeToString,
            sakuraTalk__pb2.getAllTagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/deleteTag',
            sakuraTalk__pb2.deleteTagRequest.SerializeToString,
            sakuraTalk__pb2.deleteTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addFriend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/addFriend',
            sakuraTalk__pb2.addFriendRequest.SerializeToString,
            sakuraTalk__pb2.addFriendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteFriends(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/deleteFriends',
            sakuraTalk__pb2.deleteFriendsRequest.SerializeToString,
            sakuraTalk__pb2.deleteFriendsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def blockFriends(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/blockFriends',
            sakuraTalk__pb2.blockFriendsRequest.SerializeToString,
            sakuraTalk__pb2.blockFriendsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unblockFriends(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/unblockFriends',
            sakuraTalk__pb2.unblockFriendsRequest.SerializeToString,
            sakuraTalk__pb2.unblockFriendsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addFriendsToFavorite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/addFriendsToFavorite',
            sakuraTalk__pb2.addFriendsToFavoriteRequest.SerializeToString,
            sakuraTalk__pb2.addFriendsToFavoriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeFriendsFromFavorite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/removeFriendsFromFavorite',
            sakuraTalk__pb2.removeFriendsFromFavoriteRequest.SerializeToString,
            sakuraTalk__pb2.removeFriendsFromFavoriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerPrimary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/registerPrimary',
            sakuraTalk__pb2.registerPrimaryRequest.SerializeToString,
            sakuraTalk__pb2.registerPrimaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TalkService.TalkService/getGroup',
            sakuraTalk__pb2.getGroupRequest.SerializeToString,
            sakuraTalk__pb2.getGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
