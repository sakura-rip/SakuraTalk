// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: sakuraTalk.proto

package TalkService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProfileKey int32

const (
	ProfileKey_DISPLAY_NAME ProfileKey = 0
)

// Enum value maps for ProfileKey.
var (
	ProfileKey_name = map[int32]string{
		0: "DISPLAY_NAME",
	}
	ProfileKey_value = map[string]int32{
		"DISPLAY_NAME": 0,
	}
)

func (x ProfileKey) Enum() *ProfileKey {
	p := new(ProfileKey)
	*p = x
	return p
}

func (x ProfileKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileKey) Descriptor() protoreflect.EnumDescriptor {
	return file_sakuraTalk_proto_enumTypes[0].Descriptor()
}

func (ProfileKey) Type() protoreflect.EnumType {
	return &file_sakuraTalk_proto_enumTypes[0]
}

func (x ProfileKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileKey.Descriptor instead.
func (ProfileKey) EnumDescriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{0}
}

type ToType int32

const (
	ToType_USER  ToType = 0
	ToType_ROOM  ToType = 1
	ToType_GROUP ToType = 2
	ToType_CHAT  ToType = 3
)

// Enum value maps for ToType.
var (
	ToType_name = map[int32]string{
		0: "USER",
		1: "ROOM",
		2: "GROUP",
		3: "CHAT",
	}
	ToType_value = map[string]int32{
		"USER":  0,
		"ROOM":  1,
		"GROUP": 2,
		"CHAT":  3,
	}
)

func (x ToType) Enum() *ToType {
	p := new(ToType)
	*p = x
	return p
}

func (x ToType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToType) Descriptor() protoreflect.EnumDescriptor {
	return file_sakuraTalk_proto_enumTypes[1].Descriptor()
}

func (ToType) Type() protoreflect.EnumType {
	return &file_sakuraTalk_proto_enumTypes[1]
}

func (x ToType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToType.Descriptor instead.
func (ToType) EnumDescriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{1}
}

type ContentType int32

const (
	ContentType_TEXT    ContentType = 0
	ContentType_IMAGE   ContentType = 1
	ContentType_VIDEO   ContentType = 2
	ContentType_AUDIO   ContentType = 3
	ContentType_STICKER ContentType = 4
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "TEXT",
		1: "IMAGE",
		2: "VIDEO",
		3: "AUDIO",
		4: "STICKER",
	}
	ContentType_value = map[string]int32{
		"TEXT":    0,
		"IMAGE":   1,
		"VIDEO":   2,
		"AUDIO":   3,
		"STICKER": 4,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_sakuraTalk_proto_enumTypes[2].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_sakuraTalk_proto_enumTypes[2]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{2}
}

type ContactStatus int32

const (
	ContactStatus_NO_RELATION ContactStatus = 0
	ContactStatus_FRIEND      ContactStatus = 1
	ContactStatus_BLOCKED     ContactStatus = 2
	ContactStatus_DELETED     ContactStatus = 3
)

// Enum value maps for ContactStatus.
var (
	ContactStatus_name = map[int32]string{
		0: "NO_RELATION",
		1: "FRIEND",
		2: "BLOCKED",
		3: "DELETED",
	}
	ContactStatus_value = map[string]int32{
		"NO_RELATION": 0,
		"FRIEND":      1,
		"BLOCKED":     2,
		"DELETED":     3,
	}
)

func (x ContactStatus) Enum() *ContactStatus {
	p := new(ContactStatus)
	*p = x
	return p
}

func (x ContactStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sakuraTalk_proto_enumTypes[3].Descriptor()
}

func (ContactStatus) Type() protoreflect.EnumType {
	return &file_sakuraTalk_proto_enumTypes[3]
}

func (x ContactStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactStatus.Descriptor instead.
func (ContactStatus) EnumDescriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{3}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{0}
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{1}
}

func (x *Profile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type UpdateProfileAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys    []ProfileKey `protobuf:"varint,1,rep,packed,name=keys,proto3,enum=TalkService.ProfileKey" json:"keys,omitempty"`
	Profile *Profile     `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *UpdateProfileAttributesRequest) Reset() {
	*x = UpdateProfileAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileAttributesRequest) ProtoMessage() {}

func (x *UpdateProfileAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileAttributesRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfileAttributesRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateProfileAttributesRequest) GetKeys() []ProfileKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *UpdateProfileAttributesRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type UpdateProfileAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProfileAttributesResponse) Reset() {
	*x = UpdateProfileAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileAttributesResponse) ProtoMessage() {}

func (x *UpdateProfileAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileAttributesResponse.ProtoReflect.Descriptor instead.
func (*UpdateProfileAttributesResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{3}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From_            string            `protobuf:"bytes,1,opt,name=from_,json=from,proto3" json:"from_,omitempty"`
	To               string            `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	ToType           ToType            `protobuf:"varint,3,opt,name=toType,proto3,enum=TalkService.ToType" json:"toType,omitempty"`
	MessageID        string            `protobuf:"bytes,4,opt,name=messageID,proto3" json:"messageID,omitempty"`
	CreatedTime      int64             `protobuf:"varint,5,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	Text             string            `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	ContentMetadata  map[string]string `protobuf:"bytes,7,rep,name=contentMetadata,proto3" json:"contentMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContentType      ContentType       `protobuf:"varint,8,opt,name=contentType,proto3,enum=TalkService.ContentType" json:"contentType,omitempty"`
	RelatedMessageId string            `protobuf:"bytes,9,opt,name=relatedMessageId,proto3" json:"relatedMessageId,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{4}
}

func (x *Message) GetFrom_() string {
	if x != nil {
		return x.From_
	}
	return ""
}

func (x *Message) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Message) GetToType() ToType {
	if x != nil {
		return x.ToType
	}
	return ToType_USER
}

func (x *Message) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

func (x *Message) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Message) GetContentMetadata() map[string]string {
	if x != nil {
		return x.ContentMetadata
	}
	return nil
}

func (x *Message) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_TEXT
}

func (x *Message) GetRelatedMessageId() string {
	if x != nil {
		return x.RelatedMessageId
	}
	return ""
}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{5}
}

func (x *SendMessageRequest) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID string `protobuf:"bytes,1,opt,name=messageID,proto3" json:"messageID,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{6}
}

func (x *SendMessageResponse) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

type EditMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EditMessageRequest) Reset() {
	*x = EditMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMessageRequest) ProtoMessage() {}

func (x *EditMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMessageRequest.ProtoReflect.Descriptor instead.
func (*EditMessageRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{7}
}

type EditMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EditMessageResponse) Reset() {
	*x = EditMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMessageResponse) ProtoMessage() {}

func (x *EditMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMessageResponse.ProtoReflect.Descriptor instead.
func (*EditMessageResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{8}
}

type ResendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResendMessageRequest) Reset() {
	*x = ResendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendMessageRequest) ProtoMessage() {}

func (x *ResendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendMessageRequest.ProtoReflect.Descriptor instead.
func (*ResendMessageRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{9}
}

type ResendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResendMessageResponse) Reset() {
	*x = ResendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendMessageResponse) ProtoMessage() {}

func (x *ResendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendMessageResponse.ProtoReflect.Descriptor instead.
func (*ResendMessageResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{10}
}

type UnsendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnsendMessageRequest) Reset() {
	*x = UnsendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsendMessageRequest) ProtoMessage() {}

func (x *UnsendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsendMessageRequest.ProtoReflect.Descriptor instead.
func (*UnsendMessageRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{11}
}

type UnsendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnsendMessageResponse) Reset() {
	*x = UnsendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsendMessageResponse) ProtoMessage() {}

func (x *UnsendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsendMessageResponse.ProtoReflect.Descriptor instead.
func (*UnsendMessageResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{12}
}

type ReadMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadMessageRequest) Reset() {
	*x = ReadMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMessageRequest) ProtoMessage() {}

func (x *ReadMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMessageRequest.ProtoReflect.Descriptor instead.
func (*ReadMessageRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{13}
}

type ReadMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadMessageResponse) Reset() {
	*x = ReadMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMessageResponse) ProtoMessage() {}

func (x *ReadMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMessageResponse.ProtoReflect.Descriptor instead.
func (*ReadMessageResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{14}
}

type UnreadMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnreadMessageRequest) Reset() {
	*x = UnreadMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadMessageRequest) ProtoMessage() {}

func (x *UnreadMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadMessageRequest.ProtoReflect.Descriptor instead.
func (*UnreadMessageRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{15}
}

type UnreadMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnreadMessageResponse) Reset() {
	*x = UnreadMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadMessageResponse) ProtoMessage() {}

func (x *UnreadMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadMessageResponse.ProtoReflect.Descriptor instead.
func (*UnreadMessageResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{16}
}

type ReportMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportMessageRequest) Reset() {
	*x = ReportMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessageRequest) ProtoMessage() {}

func (x *ReportMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessageRequest.ProtoReflect.Descriptor instead.
func (*ReportMessageRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{17}
}

type ReportMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportMessageResponse) Reset() {
	*x = ReportMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessageResponse) ProtoMessage() {}

func (x *ReportMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessageResponse.ProtoReflect.Descriptor instead.
func (*ReportMessageResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{18}
}

type RemoveAllMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveAllMessagesRequest) Reset() {
	*x = RemoveAllMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAllMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAllMessagesRequest) ProtoMessage() {}

func (x *RemoveAllMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAllMessagesRequest.ProtoReflect.Descriptor instead.
func (*RemoveAllMessagesRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{19}
}

type RemoveAllMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveAllMessagesResponse) Reset() {
	*x = RemoveAllMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAllMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAllMessagesResponse) ProtoMessage() {}

func (x *RemoveAllMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAllMessagesResponse.ProtoReflect.Descriptor instead.
func (*RemoveAllMessagesResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{20}
}

type ActionMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionMessageRequest) Reset() {
	*x = ActionMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionMessageRequest) ProtoMessage() {}

func (x *ActionMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionMessageRequest.ProtoReflect.Descriptor instead.
func (*ActionMessageRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{21}
}

type ActionMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionMessageResponse) Reset() {
	*x = ActionMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionMessageResponse) ProtoMessage() {}

func (x *ActionMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionMessageResponse.ProtoReflect.Descriptor instead.
func (*ActionMessageResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{22}
}

type AnnounceMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnnounceMessageRequest) Reset() {
	*x = AnnounceMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceMessageRequest) ProtoMessage() {}

func (x *AnnounceMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceMessageRequest.ProtoReflect.Descriptor instead.
func (*AnnounceMessageRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{23}
}

type AnnounceMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnnounceMessageResponse) Reset() {
	*x = AnnounceMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceMessageResponse) ProtoMessage() {}

func (x *AnnounceMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceMessageResponse.ProtoReflect.Descriptor instead.
func (*AnnounceMessageResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{24}
}

type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{25}
}

type UpdateSettingAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSettingAttributesRequest) Reset() {
	*x = UpdateSettingAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingAttributesRequest) ProtoMessage() {}

func (x *UpdateSettingAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingAttributesRequest.ProtoReflect.Descriptor instead.
func (*UpdateSettingAttributesRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{26}
}

type UpdateSettingAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSettingAttributesResponse) Reset() {
	*x = UpdateSettingAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingAttributesResponse) ProtoMessage() {}

func (x *UpdateSettingAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingAttributesResponse.ProtoReflect.Descriptor instead.
func (*UpdateSettingAttributesResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{27}
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string        `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Bio         string        `protobuf:"bytes,2,opt,name=bio,proto3" json:"bio,omitempty"`
	Status      ContactStatus `protobuf:"varint,3,opt,name=status,proto3,enum=TalkService.ContactStatus" json:"status,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{28}
}

func (x *Contact) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Contact) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *Contact) GetStatus() ContactStatus {
	if x != nil {
		return x.Status
	}
	return ContactStatus_NO_RELATION
}

type GetContactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mids []string `protobuf:"bytes,1,rep,name=mids,proto3" json:"mids,omitempty"`
}

func (x *GetContactsRequest) Reset() {
	*x = GetContactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsRequest) ProtoMessage() {}

func (x *GetContactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsRequest.ProtoReflect.Descriptor instead.
func (*GetContactsRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{29}
}

func (x *GetContactsRequest) GetMids() []string {
	if x != nil {
		return x.Mids
	}
	return nil
}

type GetContactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contacts []*Contact `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *GetContactsResponse) Reset() {
	*x = GetContactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsResponse) ProtoMessage() {}

func (x *GetContactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsResponse.ProtoReflect.Descriptor instead.
func (*GetContactsResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{30}
}

func (x *GetContactsResponse) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type CreateTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTagRequest) Reset() {
	*x = CreateTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagRequest) ProtoMessage() {}

func (x *CreateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagRequest.ProtoReflect.Descriptor instead.
func (*CreateTagRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{31}
}

type CreateTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTagResponse) Reset() {
	*x = CreateTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagResponse) ProtoMessage() {}

func (x *CreateTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagResponse.ProtoReflect.Descriptor instead.
func (*CreateTagResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{32}
}

type UpdateTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTagRequest) Reset() {
	*x = UpdateTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagRequest) ProtoMessage() {}

func (x *UpdateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagRequest.ProtoReflect.Descriptor instead.
func (*UpdateTagRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{33}
}

type UpdateTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTagResponse) Reset() {
	*x = UpdateTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagResponse) ProtoMessage() {}

func (x *UpdateTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagResponse.ProtoReflect.Descriptor instead.
func (*UpdateTagResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{34}
}

type RegisterTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterTagsRequest) Reset() {
	*x = RegisterTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTagsRequest) ProtoMessage() {}

func (x *RegisterTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTagsRequest.ProtoReflect.Descriptor instead.
func (*RegisterTagsRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{35}
}

type RegisterTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterTagsResponse) Reset() {
	*x = RegisterTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTagsResponse) ProtoMessage() {}

func (x *RegisterTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTagsResponse.ProtoReflect.Descriptor instead.
func (*RegisterTagsResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{36}
}

type GetAllTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllTagsRequest) Reset() {
	*x = GetAllTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTagsRequest) ProtoMessage() {}

func (x *GetAllTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTagsRequest.ProtoReflect.Descriptor instead.
func (*GetAllTagsRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{37}
}

type GetAllTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllTagsResponse) Reset() {
	*x = GetAllTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTagsResponse) ProtoMessage() {}

func (x *GetAllTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTagsResponse.ProtoReflect.Descriptor instead.
func (*GetAllTagsResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{38}
}

type DeleteTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagRequest) Reset() {
	*x = DeleteTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagRequest) ProtoMessage() {}

func (x *DeleteTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{39}
}

type DeleteTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagResponse) Reset() {
	*x = DeleteTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResponse) ProtoMessage() {}

func (x *DeleteTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResponse.ProtoReflect.Descriptor instead.
func (*DeleteTagResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{40}
}

type AddFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFriendRequest) Reset() {
	*x = AddFriendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendRequest) ProtoMessage() {}

func (x *AddFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendRequest.ProtoReflect.Descriptor instead.
func (*AddFriendRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{41}
}

type AddFriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFriendResponse) Reset() {
	*x = AddFriendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendResponse) ProtoMessage() {}

func (x *AddFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendResponse.ProtoReflect.Descriptor instead.
func (*AddFriendResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{42}
}

type DeleteFriendsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFriendsRequest) Reset() {
	*x = DeleteFriendsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFriendsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendsRequest) ProtoMessage() {}

func (x *DeleteFriendsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendsRequest.ProtoReflect.Descriptor instead.
func (*DeleteFriendsRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{43}
}

type DeleteFriendsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFriendsResponse) Reset() {
	*x = DeleteFriendsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFriendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendsResponse) ProtoMessage() {}

func (x *DeleteFriendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendsResponse.ProtoReflect.Descriptor instead.
func (*DeleteFriendsResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{44}
}

type BlockFriendsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockFriendsRequest) Reset() {
	*x = BlockFriendsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockFriendsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockFriendsRequest) ProtoMessage() {}

func (x *BlockFriendsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockFriendsRequest.ProtoReflect.Descriptor instead.
func (*BlockFriendsRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{45}
}

type BlockFriendsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockFriendsResponse) Reset() {
	*x = BlockFriendsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockFriendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockFriendsResponse) ProtoMessage() {}

func (x *BlockFriendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockFriendsResponse.ProtoReflect.Descriptor instead.
func (*BlockFriendsResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{46}
}

type UnblockFriendsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnblockFriendsRequest) Reset() {
	*x = UnblockFriendsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockFriendsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockFriendsRequest) ProtoMessage() {}

func (x *UnblockFriendsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockFriendsRequest.ProtoReflect.Descriptor instead.
func (*UnblockFriendsRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{47}
}

type UnblockFriendsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnblockFriendsResponse) Reset() {
	*x = UnblockFriendsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockFriendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockFriendsResponse) ProtoMessage() {}

func (x *UnblockFriendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockFriendsResponse.ProtoReflect.Descriptor instead.
func (*UnblockFriendsResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{48}
}

type AddFriendsToFavoriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFriendsToFavoriteRequest) Reset() {
	*x = AddFriendsToFavoriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendsToFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendsToFavoriteRequest) ProtoMessage() {}

func (x *AddFriendsToFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendsToFavoriteRequest.ProtoReflect.Descriptor instead.
func (*AddFriendsToFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{49}
}

type AddFriendsToFavoriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFriendsToFavoriteResponse) Reset() {
	*x = AddFriendsToFavoriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendsToFavoriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendsToFavoriteResponse) ProtoMessage() {}

func (x *AddFriendsToFavoriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendsToFavoriteResponse.ProtoReflect.Descriptor instead.
func (*AddFriendsToFavoriteResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{50}
}

type RemoveFriendsFromFavoriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveFriendsFromFavoriteRequest) Reset() {
	*x = RemoveFriendsFromFavoriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFriendsFromFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendsFromFavoriteRequest) ProtoMessage() {}

func (x *RemoveFriendsFromFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendsFromFavoriteRequest.ProtoReflect.Descriptor instead.
func (*RemoveFriendsFromFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{51}
}

type RemoveFriendsFromFavoriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveFriendsFromFavoriteResponse) Reset() {
	*x = RemoveFriendsFromFavoriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFriendsFromFavoriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendsFromFavoriteResponse) ProtoMessage() {}

func (x *RemoveFriendsFromFavoriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendsFromFavoriteResponse.ProtoReflect.Descriptor instead.
func (*RemoveFriendsFromFavoriteResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{52}
}

type UpdateFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFriendRequest) Reset() {
	*x = UpdateFriendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendRequest) ProtoMessage() {}

func (x *UpdateFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendRequest.ProtoReflect.Descriptor instead.
func (*UpdateFriendRequest) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{53}
}

type UpdateFriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFriendResponse) Reset() {
	*x = UpdateFriendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sakuraTalk_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendResponse) ProtoMessage() {}

func (x *UpdateFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sakuraTalk_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendResponse.ProtoReflect.Descriptor instead.
func (*UpdateFriendResponse) Descriptor() ([]byte, []int) {
	return file_sakuraTalk_proto_rawDescGZIP(), []int{54}
}

var File_sakuraTalk_proto protoreflect.FileDescriptor

var file_sakuraTalk_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x61, 0x6b, 0x75, 0x72, 0x61, 0x54, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x1e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x03, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x12, 0x73, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x33, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x14, 0x0a, 0x12, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x65,
	0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x75, 0x6e, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x75,
	0x6e, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x16, 0x0a, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x1b, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x09, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x20, 0x0a,
	0x1e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x21, 0x0a, 0x1f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x71, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69,
	0x6f, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x28, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x64, 0x73, 0x22,
	0x47, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x12, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x16, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14,
	0x0a, 0x12, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a,
	0x10, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x13, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17,
	0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16,
	0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x18, 0x0a, 0x16, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x61, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x21,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x15, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00,
	0x2a, 0x31, 0x0a, 0x06, 0x54, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x41,
	0x54, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x46, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x32, 0xc5, 0x12, 0x0a, 0x0b, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x2e,
	0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x50, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1f, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d,
	0x75, 0x6e, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e,
	0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x6e, 0x73, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75,
	0x6e, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x14, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x2e,
	0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x2e,
	0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x54, 0x61, 0x6c, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x0a, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x2e, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x54, 0x61, 0x6c, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x0e, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14,
	0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x19, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x20, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x3b,
	0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sakuraTalk_proto_rawDescOnce sync.Once
	file_sakuraTalk_proto_rawDescData = file_sakuraTalk_proto_rawDesc
)

func file_sakuraTalk_proto_rawDescGZIP() []byte {
	file_sakuraTalk_proto_rawDescOnce.Do(func() {
		file_sakuraTalk_proto_rawDescData = protoimpl.X.CompressGZIP(file_sakuraTalk_proto_rawDescData)
	})
	return file_sakuraTalk_proto_rawDescData
}

var file_sakuraTalk_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sakuraTalk_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_sakuraTalk_proto_goTypes = []interface{}{
	(ProfileKey)(0),                           // 0: TalkService.ProfileKey
	(ToType)(0),                               // 1: TalkService.ToType
	(ContentType)(0),                          // 2: TalkService.ContentType
	(ContactStatus)(0),                        // 3: TalkService.ContactStatus
	(*Empty)(nil),                             // 4: TalkService.Empty
	(*Profile)(nil),                           // 5: TalkService.Profile
	(*UpdateProfileAttributesRequest)(nil),    // 6: TalkService.updateProfileAttributesRequest
	(*UpdateProfileAttributesResponse)(nil),   // 7: TalkService.updateProfileAttributesResponse
	(*Message)(nil),                           // 8: TalkService.Message
	(*SendMessageRequest)(nil),                // 9: TalkService.sendMessageRequest
	(*SendMessageResponse)(nil),               // 10: TalkService.sendMessageResponse
	(*EditMessageRequest)(nil),                // 11: TalkService.editMessageRequest
	(*EditMessageResponse)(nil),               // 12: TalkService.editMessageResponse
	(*ResendMessageRequest)(nil),              // 13: TalkService.resendMessageRequest
	(*ResendMessageResponse)(nil),             // 14: TalkService.resendMessageResponse
	(*UnsendMessageRequest)(nil),              // 15: TalkService.unsendMessageRequest
	(*UnsendMessageResponse)(nil),             // 16: TalkService.unsendMessageResponse
	(*ReadMessageRequest)(nil),                // 17: TalkService.readMessageRequest
	(*ReadMessageResponse)(nil),               // 18: TalkService.readMessageResponse
	(*UnreadMessageRequest)(nil),              // 19: TalkService.unreadMessageRequest
	(*UnreadMessageResponse)(nil),             // 20: TalkService.unreadMessageResponse
	(*ReportMessageRequest)(nil),              // 21: TalkService.reportMessageRequest
	(*ReportMessageResponse)(nil),             // 22: TalkService.reportMessageResponse
	(*RemoveAllMessagesRequest)(nil),          // 23: TalkService.removeAllMessagesRequest
	(*RemoveAllMessagesResponse)(nil),         // 24: TalkService.removeAllMessagesResponse
	(*ActionMessageRequest)(nil),              // 25: TalkService.actionMessageRequest
	(*ActionMessageResponse)(nil),             // 26: TalkService.actionMessageResponse
	(*AnnounceMessageRequest)(nil),            // 27: TalkService.announceMessageRequest
	(*AnnounceMessageResponse)(nil),           // 28: TalkService.announceMessageResponse
	(*Setting)(nil),                           // 29: TalkService.Setting
	(*UpdateSettingAttributesRequest)(nil),    // 30: TalkService.updateSettingAttributesRequest
	(*UpdateSettingAttributesResponse)(nil),   // 31: TalkService.updateSettingAttributesResponse
	(*Contact)(nil),                           // 32: TalkService.Contact
	(*GetContactsRequest)(nil),                // 33: TalkService.getContactsRequest
	(*GetContactsResponse)(nil),               // 34: TalkService.getContactsResponse
	(*CreateTagRequest)(nil),                  // 35: TalkService.createTagRequest
	(*CreateTagResponse)(nil),                 // 36: TalkService.createTagResponse
	(*UpdateTagRequest)(nil),                  // 37: TalkService.updateTagRequest
	(*UpdateTagResponse)(nil),                 // 38: TalkService.updateTagResponse
	(*RegisterTagsRequest)(nil),               // 39: TalkService.registerTagsRequest
	(*RegisterTagsResponse)(nil),              // 40: TalkService.registerTagsResponse
	(*GetAllTagsRequest)(nil),                 // 41: TalkService.getAllTagsRequest
	(*GetAllTagsResponse)(nil),                // 42: TalkService.getAllTagsResponse
	(*DeleteTagRequest)(nil),                  // 43: TalkService.deleteTagRequest
	(*DeleteTagResponse)(nil),                 // 44: TalkService.deleteTagResponse
	(*AddFriendRequest)(nil),                  // 45: TalkService.addFriendRequest
	(*AddFriendResponse)(nil),                 // 46: TalkService.addFriendResponse
	(*DeleteFriendsRequest)(nil),              // 47: TalkService.deleteFriendsRequest
	(*DeleteFriendsResponse)(nil),             // 48: TalkService.deleteFriendsResponse
	(*BlockFriendsRequest)(nil),               // 49: TalkService.blockFriendsRequest
	(*BlockFriendsResponse)(nil),              // 50: TalkService.blockFriendsResponse
	(*UnblockFriendsRequest)(nil),             // 51: TalkService.unblockFriendsRequest
	(*UnblockFriendsResponse)(nil),            // 52: TalkService.unblockFriendsResponse
	(*AddFriendsToFavoriteRequest)(nil),       // 53: TalkService.addFriendsToFavoriteRequest
	(*AddFriendsToFavoriteResponse)(nil),      // 54: TalkService.addFriendsToFavoriteResponse
	(*RemoveFriendsFromFavoriteRequest)(nil),  // 55: TalkService.removeFriendsFromFavoriteRequest
	(*RemoveFriendsFromFavoriteResponse)(nil), // 56: TalkService.removeFriendsFromFavoriteResponse
	(*UpdateFriendRequest)(nil),               // 57: TalkService.updateFriendRequest
	(*UpdateFriendResponse)(nil),              // 58: TalkService.updateFriendResponse
	nil,                                       // 59: TalkService.Message.ContentMetadataEntry
}
var file_sakuraTalk_proto_depIdxs = []int32{
	0,  // 0: TalkService.updateProfileAttributesRequest.keys:type_name -> TalkService.ProfileKey
	5,  // 1: TalkService.updateProfileAttributesRequest.profile:type_name -> TalkService.Profile
	1,  // 2: TalkService.Message.toType:type_name -> TalkService.ToType
	59, // 3: TalkService.Message.contentMetadata:type_name -> TalkService.Message.ContentMetadataEntry
	2,  // 4: TalkService.Message.contentType:type_name -> TalkService.ContentType
	8,  // 5: TalkService.sendMessageRequest.message:type_name -> TalkService.Message
	3,  // 6: TalkService.Contact.status:type_name -> TalkService.ContactStatus
	32, // 7: TalkService.getContactsResponse.contacts:type_name -> TalkService.Contact
	6,  // 8: TalkService.TalkService.updateProfileAttributes:input_type -> TalkService.updateProfileAttributesRequest
	4,  // 9: TalkService.TalkService.getProfile:input_type -> TalkService.Empty
	9,  // 10: TalkService.TalkService.sendMessage:input_type -> TalkService.sendMessageRequest
	11, // 11: TalkService.TalkService.editMessage:input_type -> TalkService.editMessageRequest
	13, // 12: TalkService.TalkService.resendMessage:input_type -> TalkService.resendMessageRequest
	15, // 13: TalkService.TalkService.unsendMessage:input_type -> TalkService.unsendMessageRequest
	17, // 14: TalkService.TalkService.readMessage:input_type -> TalkService.readMessageRequest
	19, // 15: TalkService.TalkService.unreadMessage:input_type -> TalkService.unreadMessageRequest
	21, // 16: TalkService.TalkService.reportMessage:input_type -> TalkService.reportMessageRequest
	23, // 17: TalkService.TalkService.removeAllMessages:input_type -> TalkService.removeAllMessagesRequest
	25, // 18: TalkService.TalkService.actionMessage:input_type -> TalkService.actionMessageRequest
	27, // 19: TalkService.TalkService.announceMessage:input_type -> TalkService.announceMessageRequest
	4,  // 20: TalkService.TalkService.getSetting:input_type -> TalkService.Empty
	30, // 21: TalkService.TalkService.updateSettingAttributes:input_type -> TalkService.updateSettingAttributesRequest
	33, // 22: TalkService.TalkService.getContacts:input_type -> TalkService.getContactsRequest
	35, // 23: TalkService.TalkService.createTag:input_type -> TalkService.createTagRequest
	37, // 24: TalkService.TalkService.updateTag:input_type -> TalkService.updateTagRequest
	39, // 25: TalkService.TalkService.registerTags:input_type -> TalkService.registerTagsRequest
	41, // 26: TalkService.TalkService.getAllTags:input_type -> TalkService.getAllTagsRequest
	43, // 27: TalkService.TalkService.deleteTag:input_type -> TalkService.deleteTagRequest
	45, // 28: TalkService.TalkService.addFriend:input_type -> TalkService.addFriendRequest
	47, // 29: TalkService.TalkService.deleteFriends:input_type -> TalkService.deleteFriendsRequest
	49, // 30: TalkService.TalkService.blockFriends:input_type -> TalkService.blockFriendsRequest
	51, // 31: TalkService.TalkService.unblockFriends:input_type -> TalkService.unblockFriendsRequest
	53, // 32: TalkService.TalkService.addFriendsToFavorite:input_type -> TalkService.addFriendsToFavoriteRequest
	55, // 33: TalkService.TalkService.removeFriendsFromFavorite:input_type -> TalkService.removeFriendsFromFavoriteRequest
	57, // 34: TalkService.TalkService.updateFriend:input_type -> TalkService.updateFriendRequest
	7,  // 35: TalkService.TalkService.updateProfileAttributes:output_type -> TalkService.updateProfileAttributesResponse
	5,  // 36: TalkService.TalkService.getProfile:output_type -> TalkService.Profile
	10, // 37: TalkService.TalkService.sendMessage:output_type -> TalkService.sendMessageResponse
	12, // 38: TalkService.TalkService.editMessage:output_type -> TalkService.editMessageResponse
	14, // 39: TalkService.TalkService.resendMessage:output_type -> TalkService.resendMessageResponse
	16, // 40: TalkService.TalkService.unsendMessage:output_type -> TalkService.unsendMessageResponse
	18, // 41: TalkService.TalkService.readMessage:output_type -> TalkService.readMessageResponse
	20, // 42: TalkService.TalkService.unreadMessage:output_type -> TalkService.unreadMessageResponse
	22, // 43: TalkService.TalkService.reportMessage:output_type -> TalkService.reportMessageResponse
	24, // 44: TalkService.TalkService.removeAllMessages:output_type -> TalkService.removeAllMessagesResponse
	26, // 45: TalkService.TalkService.actionMessage:output_type -> TalkService.actionMessageResponse
	28, // 46: TalkService.TalkService.announceMessage:output_type -> TalkService.announceMessageResponse
	29, // 47: TalkService.TalkService.getSetting:output_type -> TalkService.Setting
	31, // 48: TalkService.TalkService.updateSettingAttributes:output_type -> TalkService.updateSettingAttributesResponse
	34, // 49: TalkService.TalkService.getContacts:output_type -> TalkService.getContactsResponse
	36, // 50: TalkService.TalkService.createTag:output_type -> TalkService.createTagResponse
	38, // 51: TalkService.TalkService.updateTag:output_type -> TalkService.updateTagResponse
	40, // 52: TalkService.TalkService.registerTags:output_type -> TalkService.registerTagsResponse
	42, // 53: TalkService.TalkService.getAllTags:output_type -> TalkService.getAllTagsResponse
	44, // 54: TalkService.TalkService.deleteTag:output_type -> TalkService.deleteTagResponse
	46, // 55: TalkService.TalkService.addFriend:output_type -> TalkService.addFriendResponse
	48, // 56: TalkService.TalkService.deleteFriends:output_type -> TalkService.deleteFriendsResponse
	50, // 57: TalkService.TalkService.blockFriends:output_type -> TalkService.blockFriendsResponse
	52, // 58: TalkService.TalkService.unblockFriends:output_type -> TalkService.unblockFriendsResponse
	54, // 59: TalkService.TalkService.addFriendsToFavorite:output_type -> TalkService.addFriendsToFavoriteResponse
	56, // 60: TalkService.TalkService.removeFriendsFromFavorite:output_type -> TalkService.removeFriendsFromFavoriteResponse
	58, // 61: TalkService.TalkService.updateFriend:output_type -> TalkService.updateFriendResponse
	35, // [35:62] is the sub-list for method output_type
	8,  // [8:35] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_sakuraTalk_proto_init() }
func file_sakuraTalk_proto_init() {
	if File_sakuraTalk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sakuraTalk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAllMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAllMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockFriendsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockFriendsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockFriendsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockFriendsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendsToFavoriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendsToFavoriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFriendsFromFavoriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFriendsFromFavoriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFriendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sakuraTalk_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFriendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sakuraTalk_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sakuraTalk_proto_goTypes,
		DependencyIndexes: file_sakuraTalk_proto_depIdxs,
		EnumInfos:         file_sakuraTalk_proto_enumTypes,
		MessageInfos:      file_sakuraTalk_proto_msgTypes,
	}.Build()
	File_sakuraTalk_proto = out.File
	file_sakuraTalk_proto_rawDesc = nil
	file_sakuraTalk_proto_goTypes = nil
	file_sakuraTalk_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TalkServiceClient is the client API for TalkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TalkServiceClient interface {
	UpdateProfileAttributes(ctx context.Context, in *UpdateProfileAttributesRequest, opts ...grpc.CallOption) (*UpdateProfileAttributesResponse, error)
	GetProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Profile, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error)
	ResendMessage(ctx context.Context, in *ResendMessageRequest, opts ...grpc.CallOption) (*ResendMessageResponse, error)
	UnsendMessage(ctx context.Context, in *UnsendMessageRequest, opts ...grpc.CallOption) (*UnsendMessageResponse, error)
	ReadMessage(ctx context.Context, in *ReadMessageRequest, opts ...grpc.CallOption) (*ReadMessageResponse, error)
	UnreadMessage(ctx context.Context, in *UnreadMessageRequest, opts ...grpc.CallOption) (*UnreadMessageResponse, error)
	ReportMessage(ctx context.Context, in *ReportMessageRequest, opts ...grpc.CallOption) (*ReportMessageResponse, error)
	RemoveAllMessages(ctx context.Context, in *RemoveAllMessagesRequest, opts ...grpc.CallOption) (*RemoveAllMessagesResponse, error)
	ActionMessage(ctx context.Context, in *ActionMessageRequest, opts ...grpc.CallOption) (*ActionMessageResponse, error)
	AnnounceMessage(ctx context.Context, in *AnnounceMessageRequest, opts ...grpc.CallOption) (*AnnounceMessageResponse, error)
	GetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Setting, error)
	UpdateSettingAttributes(ctx context.Context, in *UpdateSettingAttributesRequest, opts ...grpc.CallOption) (*UpdateSettingAttributesResponse, error)
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	RegisterTags(ctx context.Context, in *RegisterTagsRequest, opts ...grpc.CallOption) (*RegisterTagsResponse, error)
	GetAllTags(ctx context.Context, in *GetAllTagsRequest, opts ...grpc.CallOption) (*GetAllTagsResponse, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error)
	DeleteFriends(ctx context.Context, in *DeleteFriendsRequest, opts ...grpc.CallOption) (*DeleteFriendsResponse, error)
	BlockFriends(ctx context.Context, in *BlockFriendsRequest, opts ...grpc.CallOption) (*BlockFriendsResponse, error)
	UnblockFriends(ctx context.Context, in *UnblockFriendsRequest, opts ...grpc.CallOption) (*UnblockFriendsResponse, error)
	AddFriendsToFavorite(ctx context.Context, in *AddFriendsToFavoriteRequest, opts ...grpc.CallOption) (*AddFriendsToFavoriteResponse, error)
	RemoveFriendsFromFavorite(ctx context.Context, in *RemoveFriendsFromFavoriteRequest, opts ...grpc.CallOption) (*RemoveFriendsFromFavoriteResponse, error)
	UpdateFriend(ctx context.Context, in *UpdateFriendRequest, opts ...grpc.CallOption) (*UpdateFriendResponse, error)
}

type talkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkServiceClient(cc grpc.ClientConnInterface) TalkServiceClient {
	return &talkServiceClient{cc}
}

func (c *talkServiceClient) UpdateProfileAttributes(ctx context.Context, in *UpdateProfileAttributesRequest, opts ...grpc.CallOption) (*UpdateProfileAttributesResponse, error) {
	out := new(UpdateProfileAttributesResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/updateProfileAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/getProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/sendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error) {
	out := new(EditMessageResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/editMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) ResendMessage(ctx context.Context, in *ResendMessageRequest, opts ...grpc.CallOption) (*ResendMessageResponse, error) {
	out := new(ResendMessageResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/resendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UnsendMessage(ctx context.Context, in *UnsendMessageRequest, opts ...grpc.CallOption) (*UnsendMessageResponse, error) {
	out := new(UnsendMessageResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/unsendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) ReadMessage(ctx context.Context, in *ReadMessageRequest, opts ...grpc.CallOption) (*ReadMessageResponse, error) {
	out := new(ReadMessageResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/readMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UnreadMessage(ctx context.Context, in *UnreadMessageRequest, opts ...grpc.CallOption) (*UnreadMessageResponse, error) {
	out := new(UnreadMessageResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/unreadMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) ReportMessage(ctx context.Context, in *ReportMessageRequest, opts ...grpc.CallOption) (*ReportMessageResponse, error) {
	out := new(ReportMessageResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/reportMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) RemoveAllMessages(ctx context.Context, in *RemoveAllMessagesRequest, opts ...grpc.CallOption) (*RemoveAllMessagesResponse, error) {
	out := new(RemoveAllMessagesResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/removeAllMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) ActionMessage(ctx context.Context, in *ActionMessageRequest, opts ...grpc.CallOption) (*ActionMessageResponse, error) {
	out := new(ActionMessageResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/actionMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) AnnounceMessage(ctx context.Context, in *AnnounceMessageRequest, opts ...grpc.CallOption) (*AnnounceMessageResponse, error) {
	out := new(AnnounceMessageResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/announceMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/getSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UpdateSettingAttributes(ctx context.Context, in *UpdateSettingAttributesRequest, opts ...grpc.CallOption) (*UpdateSettingAttributesResponse, error) {
	out := new(UpdateSettingAttributesResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/updateSettingAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error) {
	out := new(GetContactsResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/getContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/createTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	out := new(UpdateTagResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/updateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) RegisterTags(ctx context.Context, in *RegisterTagsRequest, opts ...grpc.CallOption) (*RegisterTagsResponse, error) {
	out := new(RegisterTagsResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/registerTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetAllTags(ctx context.Context, in *GetAllTagsRequest, opts ...grpc.CallOption) (*GetAllTagsResponse, error) {
	out := new(GetAllTagsResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/getAllTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/deleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error) {
	out := new(AddFriendResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/addFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) DeleteFriends(ctx context.Context, in *DeleteFriendsRequest, opts ...grpc.CallOption) (*DeleteFriendsResponse, error) {
	out := new(DeleteFriendsResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/deleteFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) BlockFriends(ctx context.Context, in *BlockFriendsRequest, opts ...grpc.CallOption) (*BlockFriendsResponse, error) {
	out := new(BlockFriendsResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/blockFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UnblockFriends(ctx context.Context, in *UnblockFriendsRequest, opts ...grpc.CallOption) (*UnblockFriendsResponse, error) {
	out := new(UnblockFriendsResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/unblockFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) AddFriendsToFavorite(ctx context.Context, in *AddFriendsToFavoriteRequest, opts ...grpc.CallOption) (*AddFriendsToFavoriteResponse, error) {
	out := new(AddFriendsToFavoriteResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/addFriendsToFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) RemoveFriendsFromFavorite(ctx context.Context, in *RemoveFriendsFromFavoriteRequest, opts ...grpc.CallOption) (*RemoveFriendsFromFavoriteResponse, error) {
	out := new(RemoveFriendsFromFavoriteResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/removeFriendsFromFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UpdateFriend(ctx context.Context, in *UpdateFriendRequest, opts ...grpc.CallOption) (*UpdateFriendResponse, error) {
	out := new(UpdateFriendResponse)
	err := c.cc.Invoke(ctx, "/TalkService.TalkService/updateFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkServiceServer is the server API for TalkService service.
type TalkServiceServer interface {
	UpdateProfileAttributes(context.Context, *UpdateProfileAttributesRequest) (*UpdateProfileAttributesResponse, error)
	GetProfile(context.Context, *Empty) (*Profile, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error)
	ResendMessage(context.Context, *ResendMessageRequest) (*ResendMessageResponse, error)
	UnsendMessage(context.Context, *UnsendMessageRequest) (*UnsendMessageResponse, error)
	ReadMessage(context.Context, *ReadMessageRequest) (*ReadMessageResponse, error)
	UnreadMessage(context.Context, *UnreadMessageRequest) (*UnreadMessageResponse, error)
	ReportMessage(context.Context, *ReportMessageRequest) (*ReportMessageResponse, error)
	RemoveAllMessages(context.Context, *RemoveAllMessagesRequest) (*RemoveAllMessagesResponse, error)
	ActionMessage(context.Context, *ActionMessageRequest) (*ActionMessageResponse, error)
	AnnounceMessage(context.Context, *AnnounceMessageRequest) (*AnnounceMessageResponse, error)
	GetSetting(context.Context, *Empty) (*Setting, error)
	UpdateSettingAttributes(context.Context, *UpdateSettingAttributesRequest) (*UpdateSettingAttributesResponse, error)
	GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	RegisterTags(context.Context, *RegisterTagsRequest) (*RegisterTagsResponse, error)
	GetAllTags(context.Context, *GetAllTagsRequest) (*GetAllTagsResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error)
	DeleteFriends(context.Context, *DeleteFriendsRequest) (*DeleteFriendsResponse, error)
	BlockFriends(context.Context, *BlockFriendsRequest) (*BlockFriendsResponse, error)
	UnblockFriends(context.Context, *UnblockFriendsRequest) (*UnblockFriendsResponse, error)
	AddFriendsToFavorite(context.Context, *AddFriendsToFavoriteRequest) (*AddFriendsToFavoriteResponse, error)
	RemoveFriendsFromFavorite(context.Context, *RemoveFriendsFromFavoriteRequest) (*RemoveFriendsFromFavoriteResponse, error)
	UpdateFriend(context.Context, *UpdateFriendRequest) (*UpdateFriendResponse, error)
}

// UnimplementedTalkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTalkServiceServer struct {
}

func (*UnimplementedTalkServiceServer) UpdateProfileAttributes(context.Context, *UpdateProfileAttributesRequest) (*UpdateProfileAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfileAttributes not implemented")
}
func (*UnimplementedTalkServiceServer) GetProfile(context.Context, *Empty) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (*UnimplementedTalkServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedTalkServiceServer) EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (*UnimplementedTalkServiceServer) ResendMessage(context.Context, *ResendMessageRequest) (*ResendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendMessage not implemented")
}
func (*UnimplementedTalkServiceServer) UnsendMessage(context.Context, *UnsendMessageRequest) (*UnsendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsendMessage not implemented")
}
func (*UnimplementedTalkServiceServer) ReadMessage(context.Context, *ReadMessageRequest) (*ReadMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMessage not implemented")
}
func (*UnimplementedTalkServiceServer) UnreadMessage(context.Context, *UnreadMessageRequest) (*UnreadMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadMessage not implemented")
}
func (*UnimplementedTalkServiceServer) ReportMessage(context.Context, *ReportMessageRequest) (*ReportMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMessage not implemented")
}
func (*UnimplementedTalkServiceServer) RemoveAllMessages(context.Context, *RemoveAllMessagesRequest) (*RemoveAllMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllMessages not implemented")
}
func (*UnimplementedTalkServiceServer) ActionMessage(context.Context, *ActionMessageRequest) (*ActionMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionMessage not implemented")
}
func (*UnimplementedTalkServiceServer) AnnounceMessage(context.Context, *AnnounceMessageRequest) (*AnnounceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceMessage not implemented")
}
func (*UnimplementedTalkServiceServer) GetSetting(context.Context, *Empty) (*Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (*UnimplementedTalkServiceServer) UpdateSettingAttributes(context.Context, *UpdateSettingAttributesRequest) (*UpdateSettingAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettingAttributes not implemented")
}
func (*UnimplementedTalkServiceServer) GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (*UnimplementedTalkServiceServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedTalkServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (*UnimplementedTalkServiceServer) RegisterTags(context.Context, *RegisterTagsRequest) (*RegisterTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTags not implemented")
}
func (*UnimplementedTalkServiceServer) GetAllTags(context.Context, *GetAllTagsRequest) (*GetAllTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTags not implemented")
}
func (*UnimplementedTalkServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedTalkServiceServer) AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (*UnimplementedTalkServiceServer) DeleteFriends(context.Context, *DeleteFriendsRequest) (*DeleteFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriends not implemented")
}
func (*UnimplementedTalkServiceServer) BlockFriends(context.Context, *BlockFriendsRequest) (*BlockFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockFriends not implemented")
}
func (*UnimplementedTalkServiceServer) UnblockFriends(context.Context, *UnblockFriendsRequest) (*UnblockFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockFriends not implemented")
}
func (*UnimplementedTalkServiceServer) AddFriendsToFavorite(context.Context, *AddFriendsToFavoriteRequest) (*AddFriendsToFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriendsToFavorite not implemented")
}
func (*UnimplementedTalkServiceServer) RemoveFriendsFromFavorite(context.Context, *RemoveFriendsFromFavoriteRequest) (*RemoveFriendsFromFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriendsFromFavorite not implemented")
}
func (*UnimplementedTalkServiceServer) UpdateFriend(context.Context, *UpdateFriendRequest) (*UpdateFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriend not implemented")
}

func RegisterTalkServiceServer(s *grpc.Server, srv TalkServiceServer) {
	s.RegisterService(&_TalkService_serviceDesc, srv)
}

func _TalkService_UpdateProfileAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UpdateProfileAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/UpdateProfileAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UpdateProfileAttributes(ctx, req.(*UpdateProfileAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetProfile(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/EditMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).EditMessage(ctx, req.(*EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_ResendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).ResendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/ResendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).ResendMessage(ctx, req.(*ResendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UnsendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UnsendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/UnsendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UnsendMessage(ctx, req.(*UnsendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_ReadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).ReadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/ReadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).ReadMessage(ctx, req.(*ReadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UnreadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UnreadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/UnreadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UnreadMessage(ctx, req.(*UnreadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_ReportMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).ReportMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/ReportMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).ReportMessage(ctx, req.(*ReportMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_RemoveAllMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).RemoveAllMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/RemoveAllMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).RemoveAllMessages(ctx, req.(*RemoveAllMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_ActionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).ActionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/ActionMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).ActionMessage(ctx, req.(*ActionMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_AnnounceMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).AnnounceMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/AnnounceMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).AnnounceMessage(ctx, req.(*AnnounceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/GetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetSetting(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UpdateSettingAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UpdateSettingAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/UpdateSettingAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UpdateSettingAttributes(ctx, req.(*UpdateSettingAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/GetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_RegisterTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).RegisterTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/RegisterTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).RegisterTags(ctx, req.(*RegisterTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetAllTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetAllTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/GetAllTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetAllTags(ctx, req.(*GetAllTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_DeleteFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).DeleteFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/DeleteFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).DeleteFriends(ctx, req.(*DeleteFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_BlockFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).BlockFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/BlockFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).BlockFriends(ctx, req.(*BlockFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UnblockFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UnblockFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/UnblockFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UnblockFriends(ctx, req.(*UnblockFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_AddFriendsToFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendsToFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).AddFriendsToFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/AddFriendsToFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).AddFriendsToFavorite(ctx, req.(*AddFriendsToFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_RemoveFriendsFromFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFriendsFromFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).RemoveFriendsFromFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/RemoveFriendsFromFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).RemoveFriendsFromFavorite(ctx, req.(*RemoveFriendsFromFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UpdateFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UpdateFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkService.TalkService/UpdateFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UpdateFriend(ctx, req.(*UpdateFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TalkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TalkService.TalkService",
	HandlerType: (*TalkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updateProfileAttributes",
			Handler:    _TalkService_UpdateProfileAttributes_Handler,
		},
		{
			MethodName: "getProfile",
			Handler:    _TalkService_GetProfile_Handler,
		},
		{
			MethodName: "sendMessage",
			Handler:    _TalkService_SendMessage_Handler,
		},
		{
			MethodName: "editMessage",
			Handler:    _TalkService_EditMessage_Handler,
		},
		{
			MethodName: "resendMessage",
			Handler:    _TalkService_ResendMessage_Handler,
		},
		{
			MethodName: "unsendMessage",
			Handler:    _TalkService_UnsendMessage_Handler,
		},
		{
			MethodName: "readMessage",
			Handler:    _TalkService_ReadMessage_Handler,
		},
		{
			MethodName: "unreadMessage",
			Handler:    _TalkService_UnreadMessage_Handler,
		},
		{
			MethodName: "reportMessage",
			Handler:    _TalkService_ReportMessage_Handler,
		},
		{
			MethodName: "removeAllMessages",
			Handler:    _TalkService_RemoveAllMessages_Handler,
		},
		{
			MethodName: "actionMessage",
			Handler:    _TalkService_ActionMessage_Handler,
		},
		{
			MethodName: "announceMessage",
			Handler:    _TalkService_AnnounceMessage_Handler,
		},
		{
			MethodName: "getSetting",
			Handler:    _TalkService_GetSetting_Handler,
		},
		{
			MethodName: "updateSettingAttributes",
			Handler:    _TalkService_UpdateSettingAttributes_Handler,
		},
		{
			MethodName: "getContacts",
			Handler:    _TalkService_GetContacts_Handler,
		},
		{
			MethodName: "createTag",
			Handler:    _TalkService_CreateTag_Handler,
		},
		{
			MethodName: "updateTag",
			Handler:    _TalkService_UpdateTag_Handler,
		},
		{
			MethodName: "registerTags",
			Handler:    _TalkService_RegisterTags_Handler,
		},
		{
			MethodName: "getAllTags",
			Handler:    _TalkService_GetAllTags_Handler,
		},
		{
			MethodName: "deleteTag",
			Handler:    _TalkService_DeleteTag_Handler,
		},
		{
			MethodName: "addFriend",
			Handler:    _TalkService_AddFriend_Handler,
		},
		{
			MethodName: "deleteFriends",
			Handler:    _TalkService_DeleteFriends_Handler,
		},
		{
			MethodName: "blockFriends",
			Handler:    _TalkService_BlockFriends_Handler,
		},
		{
			MethodName: "unblockFriends",
			Handler:    _TalkService_UnblockFriends_Handler,
		},
		{
			MethodName: "addFriendsToFavorite",
			Handler:    _TalkService_AddFriendsToFavorite_Handler,
		},
		{
			MethodName: "removeFriendsFromFavorite",
			Handler:    _TalkService_RemoveFriendsFromFavorite_Handler,
		},
		{
			MethodName: "updateFriend",
			Handler:    _TalkService_UpdateFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sakuraTalk.proto",
}
